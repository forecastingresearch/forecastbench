main:
  steps:
    - init:
        assign:
          - execution_results: {}
          - execution_results.success: {}
          - execution_results.failure: {}
    - step1:
        parallel:
          exception_policy: continueAll
          shared: [execution_results]
          for:
            value: data_source
            in:
              - acled
              - manifold
              - metaculus
              - infer
              - yfinance
              - polymarket
              - wikipedia
              - fred
            steps:
              - run:
                  try:
                    steps:
                      - loop_body:
                          call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                          args:
                            workflow_id: fetch_and_update_data_source
                            argument:
                              source: ${data_source}
                          result: data_source_result
                      - save_success:
                          assign:
                            - execution_results.success[string(data_source)]: ${data_source_result}
                  except:
                    as: e
                    steps:
                      - save_failure:
                          assign:
                            - execution_results.failure[string(data_source)]: ${json.decode(e.operation.error.payload)}
    - check_exception_encountered:
         switch:
           - condition: ${len(execution_results.failure) != 0}
             steps:
               - raise_exception:
                   raise: ${execution_results}
    - return_execution_results:
        return: True
