main:
  steps:
    - init:
        assign:
          - execution_results: {}
          - execution_results.success: {}
          - execution_results.failure: {}
    - fetch_data:
        try:
          steps:
            - run_fetch_data:
                call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                args:
                  workflow_id: main-step1
                result: fetch_data_result
            - save_successful_fetch_data_execution:
                assign:
                  - execution_results.success["fetch_and_update_questions"]: ${fetch_data_result}
        except:
          as: e
          steps:
            - save_failed_fetch_data_execution:
                assign:
                  - execution_results.failure["fetch_and_update_questions"]: ${json.decode(e.operation.error.payload)}
    - parallel_metadata_and_resolve:
        parallel:
          exception_policy: continueAll
          shared: [execution_results]
          branches:
            - metadataBranch:
                steps:
                  - metadata:
                      try:
                        steps:
                          - run_metadata:
                              call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                              args:
                                workflow_id: main-step2
                              result: metadata_result
                          - save_successful_metadata_execution:
                              assign:
                                - execution_results.success["metadata"]: ${metadata_result}
                      except:
                        as: e
                        steps:
                          - save_failed_metadata_execution:
                              assign:
                                - execution_results.failure["metadata"]: ${json.decode(e.operation.error.payload)}
            - resolveBranch:
                steps:
                  - resolve:
                      try:
                        steps:
                          - run_resolve:
                              call: googleapis.workflowexecutions.v1.projects.locations.workflows.executions.run
                              args:
                                workflow_id: main-resolve
                              result: resolve_result
                          - save_successful_resolve_execution:
                              assign:
                                - execution_results.success["resolution_and_leaderboard"]: ${resolve_result}
                      except:
                        as: e
                        steps:
                          - save_failed_resolve_execution:
                              assign:
                                - execution_results.failure["resolution_and_leaderboard"]: ${json.decode(e.operation.error.payload)}
    - step_check_exception_encountered:
        switch:
          - condition: ${len(execution_results.failure) != 0}
            steps:
              - step_raise_exception:
                  raise: ${execution_results}
    - step_return_execution_results:
        return: ${execution_results}
